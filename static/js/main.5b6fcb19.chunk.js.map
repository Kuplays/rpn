{"version":3,"sources":["TestComponent.js","components/InputForm.js","components/ResultTable.js","App.js","reportWebVitals.js","index.js"],"names":["React","Component","InputForm","props","onChangeInput","e","setState","inputValue","target","value","isInputValid","currentInputCheck","state","isValid","match","onSubmitForm","preventDefault","val","encodeURIComponent","replace","console","log","fetch","then","res","json","result","passResult","parentToggler","error","message","alert","bind","onSubmit","this","for","className","type","name","id","onChange","placeholder","ResultTable","scope","newContent","map","item","infixNotation","transformedNotation","App","setContent","copy","content","push","toggleLoadingState","newState","hasLoaded","dark","color","href","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b6fcb19.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass TestComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            error: null,\r\n            hasLoaded: false,\r\n            content: null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        let val = encodeURIComponent('((5+1*3)*(2+7/3))/2');\r\n        console.log(\"ENCODED AS: \" + val);\r\n        fetch(\"http://localhost:8080/api?infixNotation=\" + val)\r\n        .then(res => res.json())\r\n        .then(\r\n            (result) => {\r\n                this.setState({\r\n                    hasLoaded: true,\r\n                    content: result\r\n                });\r\n            },\r\n            (error) => {\r\n                this.setState({\r\n                    hasLoaded: true,\r\n                    error\r\n                });\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        const {error, hasLoaded, content} = this.state;\r\n        if (error) {\r\n            return <div>ERROR: {error.message}</div>;\r\n        } else if (!hasLoaded) {\r\n            return <div>LOADING...</div>;\r\n        } else {\r\n            return(\r\n                <div>\r\n                    <h1>INPUT: {content.infixNotation}</h1>\r\n                    <h2>RPN NOTATION: {content.transformedNotation}</h2>\r\n                    <h2>RESULT: {content.result}</h2>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\nexport default TestComponent;","import React from 'react';\r\nimport {Form, FormGroup, Label, Input, FormText, Button} from 'reactstrap';\r\n\r\nclass InputForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            inputValue: \"\"\r\n        };\r\n\r\n        this.onChangeInput = this.onChangeInput.bind(this);\r\n        this.onSubmitForm = this.onSubmitForm.bind(this);\r\n    }\r\n\r\n    onChangeInput = (e) => {\r\n        this.setState(\r\n            {inputValue: e.target.value}\r\n        );\r\n    }\r\n\r\n    isInputValid = () => {\r\n        let currentInputCheck = this.state.inputValue;\r\n        let isValid = true;\r\n        let validRegexp = /^[0-9\\+\\-\\*\\/\\(\\)]+$/;\r\n\r\n        if (currentInputCheck === \"\") {\r\n            isValid = false;\r\n        } else if (!currentInputCheck.match(validRegexp)) {\r\n            isValid = false;\r\n        }\r\n\r\n        return isValid;\r\n    }\r\n\r\n    onSubmitForm = (e) => {\r\n        e.preventDefault();\r\n        let val = encodeURIComponent(this.state.inputValue.replace(/\\s/g, \"\"));\r\n        console.log(\"ENCODED AS: \" + val);\r\n        if (this.isInputValid())\r\n            fetch(\"https://kuplays-rpn.herokuapp.com/api?infixNotation=\" + val)\r\n            .then(res => res.json())\r\n            .then(\r\n                (result) => {\r\n                    console.log(\"PASSING TO PARENT: \" + result);\r\n                    this.props.passResult(result);\r\n                    this.props.parentToggler(true);\r\n                },\r\n                (error) => {\r\n                    this.props.parentToggler(false);\r\n                    console.log(\"ERROR: \" + error.message );\r\n                }\r\n            )\r\n        else {\r\n            alert(\"Input contains errors\");\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Form onSubmit={this.onSubmitForm}>\r\n                <FormGroup>\r\n                    <Label for=\"inputValue\">INFIX NOTATION</Label>\r\n                    <Input className=\"text-center\" type=\"text\" name=\"inputInfix\" id=\"inputValue\" onChange={this.onChangeInput} placeholder=\"6 / 2 * (2 + 1)\" />\r\n                </FormGroup>\r\n                <Button className=\"col-12 btn-success\">SUBMIT</Button>\r\n            </Form>\r\n        );\r\n    }\r\n}\r\n\r\nexport default InputForm;","import React from 'react';\r\n\r\nclass ResultTable extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"table-responsive pt-2\">\r\n                <table className=\"table table-striped table-hover\">\r\n                    <thead className=\"thead-dark\">\r\n                        <tr>\r\n                            <th scope=\"col\">INFIX NOTATION</th>\r\n                            <th scope=\"col\">RPN NOTATION</th>\r\n                            <th scope=\"col\">RESULT</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {this.props.newContent.map(item => (\r\n                        <tr key={item.id}>\r\n                        <td>{item.infixNotation}</td>\r\n                        <td>{item.transformedNotation}</td>\r\n                        <td>{item.result}</td>\r\n                    </tr>\r\n                    ))}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ResultTable;","import React from 'react';\nimport './App.css';\nimport {Navbar, NavbarBrand} from 'reactstrap';\nimport TestComponent from './TestComponent.js';\nimport InputForm from './components/InputForm';\nimport ResultTable from './components/ResultTable';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasLoaded: false,\n      content: [],\n      error: null\n    }\n  }\n\n  setContent = (newContent) => {\n    console.log(\"RECIEVED: \" + newContent);\n    console.log(\"INFIX RECIEVED: \" + newContent.infixNotation);\n    let copy = this.state.content;\n    copy.push(newContent);\n    this.setState({content: copy});\n    console.log(\"PARENT CHANGED CONTENT: \" + this.state.content);\n  }\n\n  toggleLoadingState = (newState) => this.setState({hasLoaded: newState});\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar dark color=\"primary\">\n          <div className=\"container\">\n            <NavbarBrand href=\"#\">\n              RPN Calculator\n            </NavbarBrand>\n          </div>\n        </Navbar>\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-sm\">\n              <InputForm passResult = {this.setContent} parentToggler = {this.toggleLoadingState} />\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-sm\">\n              {this.state.content != null ? <ResultTable newContent = {this.state.content} /> : null}\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}